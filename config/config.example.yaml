# Deep Eye Configuration File
# Copy this file to config.yaml and update with your settings

# AI Provider Settings
ai_providers:
  openrouter:
    enabled: true
    api_key: "sk-your-openrouter-api-key-here"
    model: "gpt-4o"
    temperature: 0.7
    max_tokens: 2000
    timeout: 30

  openai:
    enabled: true
    api_key: "sk-your-openai-api-key-here"
    model: "gpt-4o"
    temperature: 0.7
    max_tokens: 2000
    timeout: 30

  claude:
    enabled: true
    api_key: "sk-ant-your-claude-api-key-here"
    model: "claude-3-5-sonnet-20241022"
    temperature: 0.7
    max_tokens: 2000
    timeout: 30

  grok:
    enabled: true
    api_key: "xai-your-grok-api-key-here"
    base_url: "https://api.x.ai/v1"
    model: "grok-beta"
    temperature: 0.7
    max_tokens: 2000
    timeout: 30

  ollama:
    enabled: true
    base_url: "http://localhost:11434"
    model: "llama2"
    temperature: 0.7
    timeout: 60

# Scanner Settings
scanner:
  # Target configuration
  target_url: "" # Default target URL (can be overridden via CLI)

  # Crawling settings
  default_threads: 5
  default_depth: 2
  max_urls: 1000
  timeout: 10
  user_agent: "Deep-Eye/1.0 (Security Scanner)"
  follow_redirects: true
  verify_ssl: true
  max_retries: 3

  # Scan modes
  enable_recon: false # Enable reconnaissance phase
  full_scan: false # Enable all vulnerability tests
  quick_scan: false # Quick scan (basic tests only)

  # AI Provider selection
  ai_provider: "openai" # Options: openai, claude, grok, ollama

  # Network settings
  proxy: "" # Proxy URL (e.g., http://127.0.0.1:8080)
  custom_headers: {} # Custom headers as key-value pairs
  cookies: {} # Cookies as key-value pairs

# Vulnerability Scanner Settings
vulnerability_scanner:
  enabled_checks:
    - sql_injection
    - xss
    - command_injection
    - ssrf
    - xxe
    - path_traversal
    - csrf
    - authentication_bypass
    - information_disclosure
    - security_misconfiguration
    - lfi
    - rfi
    - open_redirect
    - cors_misconfiguration
    - insecure_deserialization
    - broken_authentication
    - sensitive_data_exposure
    - xml_injection
    - ldap_injection
    - ssti
    - crlf_injection
    - host_header_injection
    - jwt_vulnerabilities
    - api_vulnerabilities
    - graphql_vulnerabilities
    # v1.1.0 advanced modules
    - api_security
    - business_logic
    - authentication
    - file_upload
    # v1.2.0 advanced modules
    - websocket
    - anomaly_detector
    # Note: osint_gathering has been moved to reconnaissance phase

  # Payload generation
  payload_generation:
    use_ai: true
    context_aware: true
    cve_database: true
    custom_wordlists: true
    use_payload_obfuscation: false # Enable obfuscation for WAF bypass

  # Testing depth
  testing:
    thorough_mode: false
    time_based_detection_delay: 5
    blind_injection_attempts: 3

# WebSocket Testing
websocket:
  enabled: true
  test_origin_validation: true
  test_authentication: true
  test_injection_attacks: true
  test_dos_attacks: true
  test_rate_limiting: true
  test_tls_verification: true
  connection_timeout: 10
  max_message_size: 65536 # 64KB

# Machine Learning Anomaly Detection
ml_detection:
  enabled: true
  baseline_samples: 100 # Number of samples for baseline training
  anomaly_threshold: 0.6
  features:
    - response_time
    - status_code
    - response_size
    - error_patterns
    - parameter_behavior
  save_model: true
  model_path: "data/ml_models/anomaly_detector.pkl"

# Enhanced OSINT Reconnaissance
osint:
  enabled: true
  google_dorking: true
  email_harvesting: true
  metadata_extraction: true
  social_media_check: true
  breach_database_check: true
  certificate_transparency: true
  github_search: true
  pastebin_search: true
  max_search_results: 50
  timeout: 30

# Payload Obfuscation
payload_obfuscation:
  enabled: false # Enable for WAF bypass testing
  techniques:
    - base64_encoding
    - url_encoding
    - unicode_encoding
    - hex_encoding
    - case_manipulation
    - comment_insertion
    - concatenation
    - null_byte_injection
    - double_encoding
    - character_substitution
  waf_bypass_mode: false

# API Security Testing
api_security:
  enabled: true
  test_owasp_api_top10: true
  test_graphql: true
  check_rate_limiting: true
  check_authentication: true
  check_excessive_data_exposure: true

# Business Logic Testing
business_logic:
  enabled: true
  test_price_manipulation: true
  test_workflow_bypass: true
  test_race_conditions: true
  test_quantity_limits: true
  test_coupon_abuse: true

# Authentication Testing
authentication:
  enabled: true
  test_weak_passwords: true
  test_brute_force_protection: true
  test_session_management: true
  test_jwt_security: true
  test_oauth_security: true
  test_mfa_bypass: true

# File Upload Testing
file_upload:
  enabled: true
  test_unrestricted_upload: true
  test_path_traversal: true
  test_file_type_bypass: true
  test_malicious_content: true
  max_file_size_test: 10485760 # 10MB

# Collaborative Scanning
collaboration:
  enabled: false
  session_storage: "data/sessions"
  export_format: "json"
  auto_distribute_work: true

# Reconnaissance Settings
reconnaissance:
  enabled_modules:
    - subdomain_enumeration
    - dns_records
    - whois_lookup
    - technology_detection
    - ssl_certificate_info
    - port_scanning
    - directory_bruteforce
    - email_harvesting
    - osint_gathering # OSINT is now part of reconnaissance

  subdomain_sources:
    - crt.sh
    - hackertarget
    - threatcrowd
    - virustotal

  port_scan:
    common_ports: [80, 443, 8080, 8443, 3000, 3306, 5432, 6379, 27017]
    scan_timeout: 2

# Report Settings
reporting:
  # Output configuration
  enabled: true # Generate reports automatically
  output_directory: "reports" # Directory to save reports
  output_filename: "" # Custom filename (auto-generated if empty)
  default_format: "html" # Options: html, pdf, json

  # Report sections
  include_sections:
    - executive_summary
    - vulnerability_details
    - remediation_guide
    - technical_details
    - reconnaissance_data
    - appendix

  # Severity colors
  severity_colors:
    critical: "#8B0000"
    high: "#FF4500"
    medium: "#FFA500"
    low: "#FFD700"
    info: "#87CEEB"

  # Branding
  branding:
    company_name: "Deep Eye Security"
    logo_path: "templates/logo.png"
    footer: "Confidential Security Assessment Report"

# Logging Settings
logging:
  level: "INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL
  log_to_file: true
  log_file: "logs/deep_eye.log"
  max_file_size: 10485760 # 10MB
  backup_count: 5
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Database Settings (for storing scan results)
database:
  enabled: true
  type: "sqlite"
  path: "data/deep_eye.db"
  auto_cleanup_days: 30

# Rate Limiting
rate_limiting:
  enabled: true
  requests_per_second: 10
  burst_size: 20
  delay_on_error: 2

# Proxy Settings
proxy:
  enabled: false
  http: ""
  https: ""

# Advanced Settings
advanced:
  enable_javascript_rendering: false
  screenshot_enabled: false
  custom_dns_servers: []
  exclude_extensions:
    [".jpg", ".jpeg", ".png", ".gif", ".css", ".js", ".woff", ".woff2", ".ttf"]
  exclude_patterns: []
  max_response_size: 5242880 # 5MB

# Plugin System (v1.3.0)
plugin_manager:
  enabled: false # Enable custom plugin system
  plugin_directory: "plugins" # Directory for custom vulnerability scanner plugins
  auto_load: true # Automatically load all plugins on startup

# Notification System (v1.3.0)
notifications:
  enabled: false # Master switch for all notifications
  notify_on_critical: true # Send immediate alerts for critical vulnerabilities

  # Email Notifications
  email:
    enabled: false
    smtp_server: "smtp.gmail.com"
    smtp_port: 587
    username: "your-email@gmail.com"
    password: "your-app-password" # Use app-specific password
    from_address: "deep-eye@yourcompany.com"
    to_addresses:
      - "security-team@yourcompany.com"
      - "admin@yourcompany.com"

  # Slack Notifications
  slack:
    enabled: false
    webhook_url: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
    channel: "#security-alerts" # Optional: override webhook channel
    username: "Deep Eye Scanner" # Optional: custom bot name
    icon_emoji: ":shield:" # Optional: custom emoji

  # Discord Notifications
  discord:
    enabled: false
    webhook_url: "https://discord.com/api/webhooks/YOUR/WEBHOOK/URL"
    username: "Deep Eye Scanner" # Optional: custom bot name
    avatar_url: "" # Optional: custom avatar URL
